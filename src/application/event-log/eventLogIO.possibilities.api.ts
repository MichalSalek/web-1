import {NextApiWithOptionalPayload} from '../../domain/http/http.types'
import {getCurrentUser_IO} from '../../domain/user/userIO.operations.api'
import {IDType} from '../../READONLY-shared-kernel/application/application.types'
import {EVENT_INFO_TYPE} from '../../READONLY-shared-kernel/domain/commands-and-queries/cqrs.types'
import {EventLog, EventLogType, EventLogWithoutAutogenerated} from '../../READONLY-shared-kernel/models/db_models'
import {__debuggerGate} from '../debugger/debugger.utils.api'
import {reportIssue} from '../debugger/errorHandler.possibilities.api'
import {DB_CLIENT} from "../db/db.utils.api";


export type PushEventLogToDB = {
  eventName: EVENT_INFO_TYPE,
  meta: Partial<EventLogWithoutAutogenerated>
  eventLogType?: EventLogType
  eventPayloadToStringify?: Record<string, unknown>
}

export const pushEventLogToDB_IO = async (props: PushEventLogToDB): Promise<EventLog | undefined> => {
  const {
    eventName,
    meta,
    eventLogType,
    eventPayloadToStringify
  } = props
  if (!eventLogType) {
    return undefined
  }
  return DB_CLIENT.use.eventLog.create({
    data: {
      event: eventName,
      event_type: eventLogType,
      event_payload: JSON.stringify(eventPayloadToStringify),
      location: meta?.location,
      language: meta?.language,
      user_agent: meta?.user_agent,
      client_ip: meta?.client_ip,
      created_by_user: {
        connect: {
          user_id: meta?.created_by_user_id
        }
      }
    }
  }) as Promise<EventLog | undefined>
}


export const getEventLogs_IO = async (userID?: IDType | null, EventLogType?: EventLogType): Promise<EventLog[] | []> => {
  if (!userID) {
    __debuggerGate(() => console.log('getEventLogs: no userID.'))
    return []
  }
  return (
    DB_CLIENT.use.eventLog.findMany({
      where: {
        created_by_user_id: userID,
        event_type: EventLogType
      },
      orderBy: {
        created_at: 'asc'
      }
    })) as Promise<EventLog[] | []>
}

export const getEventLogsByUser_IO = async (props: NextApiWithOptionalPayload<EventLogType>): Promise<EventLog[] | []> => {
  try {
    const {currentUser} = await getCurrentUser_IO(props)
    return getEventLogs_IO(
      currentUser?.user_id,
      props.payload)
  } catch (e) {
    reportIssue(
      'getEventLogsByUser - no user.',
      e)
    return []
  }
}
