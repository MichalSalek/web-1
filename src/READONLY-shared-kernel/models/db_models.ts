import {DateAndTime, IDType} from '../application/application.types'
import {EVENT_COMMANDS_AND_QUERIES_TYPE} from '../domain/commands-and-queries/cqrs.types'
import {Trait} from "../domain/gallery/gallery.types";
import {objectFlip, ValueOf} from "../application/application.utils";
import {PricingPlan} from "../domain/pricing/pricing.config";


export const RoleValue = Object.freeze({
  NOT_LOGGED_IN: 1,
  USER_LEVEL_1: 2,
  ACCOUNT_HOLDER: 3,
  MASTER_ADMIN: 4
} as const)
export const RoleValueFlipped = objectFlip(RoleValue)
export type Role = ValueOf<typeof RoleValue>


export const PaymentStatusValue = Object.freeze({
  UNPAID: 1,
  PAID: 2,
  PAYMENT_IN_PROGRESS: 3,
  REJECTED: 4
} as const)
export const PaymentStatusValueFlipped = objectFlip(PaymentStatusValue)
export type PaymentStatus = ValueOf<typeof PaymentStatusValue>


export const AccountStatusValue = Object.freeze({
  ACTIVE: 1,
  NOT_ACTIVE: 2,
  EXPIRING_IN_PROGRESS: 3,
  EXPIRED: 4
} as const)
export const AccountStatusValueFlipped = objectFlip(AccountStatusValue)
export type AccountStatus = ValueOf<typeof AccountStatusValue>


export const ALL_LOGGED_ROLES_COLLECTION: Role[] = [
  RoleValue.USER_LEVEL_1,
  RoleValue.ACCOUNT_HOLDER,
  RoleValue.MASTER_ADMIN
]

export const ALL_ROLES_COLLECTION: Role[] = [
  RoleValue.USER_LEVEL_1,
  RoleValue.ACCOUNT_HOLDER,
  RoleValue.MASTER_ADMIN,
  RoleValue.NOT_LOGGED_IN
]

export const ACCOUNT_HOLDER_AND_ADMIN: Role[] = [
  RoleValue.ACCOUNT_HOLDER,
  RoleValue.MASTER_ADMIN
]


type DateAndTimePartial = {
  created_at: DateAndTime
}


type UserMetadataPartial = {
  client_ip: string | null
  location: string | null
  language: string | null
  user_agent: string | null
}


export type Admin = {
  id: IDType
  notes: string
} & DateAndTimePartial


export const EventLogTypeValue = Object.freeze({
  ACCOUNT_EVENT_LOG: 1,
  LOGIN_EVENT_LOG: 2
} as const)
export const EventLogTypeValueEnum = Object.values(EventLogTypeValue)
export const EventLogTypeValueFlipped = objectFlip(EventLogTypeValue)
export type EventLogType = ValueOf<typeof EventLogTypeValue>


export type EventLog = {
  event_log_id: IDType
  created_by_user_id: IDType
  event: string
  event_type: EventLogType
  event_payload: string | null
} & UserMetadataPartial & DateAndTimePartial


export type EventLogWithoutAutogenerated = Omit<EventLog, 'event_log_id' | 'created_at'>


export type Account = {
  account_id: IDType
  created_by_user_id: IDType
  display_name: string | null
  pricing_plan: PricingPlan
  payment_status: PaymentStatus
  upcoming_payment_date: DateAndTime | null
  account_status: AccountStatus
  account_expiration_date: DateAndTime | null

} & DateAndTimePartial


export const SessionModeValue = Object.freeze({
  STANDARD: 1,
  PRESENTATION: 2,
  BECOME_USER: 3
} as const)
export const SessionModeValueFlipped = objectFlip(SessionModeValue)
export type SessionMode = ValueOf<typeof SessionModeValue>


export type Session = {
  session_id: IDType
  created_by_user_id: IDType
  session_mode: SessionMode
  last_used: DateAndTime | null
  expires_at: DateAndTime
} & DateAndTimePartial & UserMetadataPartial


export type DeletedUser = {
  user_id: IDType
  body: string

} & DateAndTimePartial

export type User = {
  user_id: IDType
  email: string
  display_name: string
  password: string
  role: Role
  permissions: EVENT_COMMANDS_AND_QUERIES_TYPE[]
  is_active: boolean

} & DateAndTimePartial


export type GalleryRecord = {
  gallery_record_id: IDType
  created_by_account_id: IDType
  asset_url: string
  asset_traits: Trait[]
  asset_color_traits: Trait[]
} & DateAndTimePartial

export type GalleryConfig = {
  gallery_config_id: IDType
  created_by_account_id: IDType
  records_traits: Trait[]
  records_color_traits: Trait[]
} & DateAndTimePartial


export type UserNoSensitive = Omit<User, 'password'>

export type UserRelationsAll = {
  sessions: Session[]
  account: Account
  event_logs: EventLog[]
}
